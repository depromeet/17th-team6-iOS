//
//  RunningViewController.swift
//  DoRunDoRun
//
//  Created by Inho Choi on 9/13/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import NMapsMap
import UIKit

protocol RunningDisplayLogic: AnyObject {
}

final class RunningViewController: UIViewController {
    var interactor: RunningBusinessLogic?
    var router: (RunningRoutingLogic & RunningDataPassing)?
    
    // MARK: UI Object
    private let segmentedControl: UISegmentedControl = {
        let segment = UISegmentedControl()
        segment.translatesAutoresizingMaskIntoConstraints = false
        segment.insertSegment(withTitle: "목표", at: 0, animated: true)
        segment.insertSegment(withTitle: "지도", at: 1, animated: true)
        segment.selectedSegmentIndex = 0
        
        segment.setTitleTextAttributes([
            NSAttributedString.Key.foregroundColor: UIColor.systemGray,
            NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16)
        ], for: .normal)
        segment.setTitleTextAttributes([
            NSAttributedString.Key.foregroundColor: UIColor.black,
            NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16)
        ], for: .selected)
        segment.selectedSegmentTintColor = .clear
        segment.setBackgroundImage(UIImage(), for: .normal, barMetrics: .default)
        segment.setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)
        return segment
    }()
    
    private let underlineView: UIView = {
        let view = UIView()
        view.backgroundColor = .systemBlue // TODO: 이거 색깔 고르기
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private var underlineLeadingConstraint: NSLayoutConstraint!
    
    private let containerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let goalView: GoalView = {
        let view = GoalView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let naverMapView: NMFMapView = {
        let mapView = NMFMapView()
        mapView.translatesAutoresizingMaskIntoConstraints = false
        mapView.isHidden = true
        return mapView
    }()
    
    private let startButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Start Running", for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("러닝 시작", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = UIColor(hex: 0x4C46FC)
        button.titleLabel?.font = .pretendard(size: 40, weight: .heavy)
        return button
    }()
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RunningInteractor()
        let presenter = RunningPresenter()
        let router = RunningRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUI()
        setupActions()
    }
    
    private func setUI() {
        view.backgroundColor = .white
        view.addSubviews(segmentedControl, underlineView, containerView)
        containerView.addSubviews(goalView, naverMapView)
        
        underlineLeadingConstraint = underlineView.leadingAnchor.constraint(equalTo: segmentedControl.leadingAnchor)
        
        NSLayoutConstraint.activate([
            segmentedControl.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            segmentedControl.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            segmentedControl.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            segmentedControl.heightAnchor.constraint(equalToConstant: 44),
            
            underlineView.topAnchor.constraint(equalTo: segmentedControl.bottomAnchor, constant: 4),
            underlineLeadingConstraint,
            underlineView.widthAnchor.constraint(equalTo: segmentedControl.widthAnchor, multiplier: 0.5),
            underlineView.heightAnchor.constraint(equalToConstant: 2),
            
            containerView.topAnchor.constraint(equalTo: underlineView.bottomAnchor, constant: 16),
            containerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            containerView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            containerView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            goalView.topAnchor.constraint(equalTo: containerView.topAnchor),
            goalView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),
            goalView.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            goalView.bottomAnchor.constraint(lessThanOrEqualTo: containerView.bottomAnchor),
            
            naverMapView.topAnchor.constraint(equalTo: containerView.topAnchor),
            naverMapView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),
            naverMapView.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            naverMapView.bottomAnchor.constraint(lessThanOrEqualTo: containerView.bottomAnchor),
            
        ])
    }
    
    private func setupActions() {
        segmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)
    }
    
    @objc private func segmentChanged() {
        let selectedIndex = segmentedControl.selectedSegmentIndex
        
        UIView.animate(withDuration: 0.3, delay: 0, usingSpringWithDamping: 0.8, initialSpringVelocity: 0.2, options: .curveEaseInOut) { [weak self] in
            guard let self else { return }
            underlineLeadingConstraint.constant = selectedIndex == 0 ? 0 : segmentedControl.frame.width / CGFloat(segmentedControl.numberOfSegments)
            view.layoutIfNeeded()
        }
        
        switch selectedIndex {
            case 0:
                goalView.isHidden = false
                naverMapView.isHidden = true
            case 1:
                goalView.isHidden = true
                naverMapView.isHidden = false
            default:
                break
        }
    }
}

extension RunningViewController:  RunningDisplayLogic {
    
}

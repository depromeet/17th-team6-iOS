//
//  HomeViewController.swift
//  DoRunDoRun
//
//  Created by Inho Choi on 9/13/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject {
    func displayOverallGoal(viewModel: Home.LoadOverallGoal.ViewModel)
    func displaySessionGoal(viewModel: Home.LoadSessionGoal.ViewModel)
}

final class HomeViewController: UIViewController {
    var interactor: HomeBusinessLogic?
    var router: (HomeRoutingLogic & HomeDataPassing)?
        
    // MARK: UI
    
    private let overallGoalView = OverallGoalView()
    
    private let sessionGoalView = SessionGoalView()
    
    private let retryGoalView = RetryGoalView()
    
    // MARK: Object lifecycle

    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setupView()
        
        fetchGoalData()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupNavigationBar() {
        let appearance = UINavigationBarAppearance()
        appearance.configureWithOpaqueBackground()
        appearance.backgroundColor = .init(hex: 0xFFFFFF)
        appearance.shadowColor = .none

        navigationController?.navigationBar.standardAppearance = appearance
        navigationController?.navigationBar.scrollEdgeAppearance = appearance
        navigationController?.navigationBar.compactAppearance = appearance
        
        
        let homeLabel = UILabel()
        homeLabel.attributedText = .withLetterSpacing(
            text: "홈",
            font: .pretendard(size: 20, weight: .bold),
            px: 0.5,
            color: .init(hex: 0x000000)
        )
        navigationItem.leftBarButtonItem = UIBarButtonItem(customView: homeLabel)
        
        let button = UIButton(type: .system)
        button.setImage(UIImage(systemName: "bell.badge"), for: .normal)
        button.tintColor = .init(hex: 0x1C1B1F)
        button.addTarget(self, action: #selector(didTapNotification), for: .touchUpInside)
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: button)
    }
    
    private func setupView() {
        view.backgroundColor = .init(hex: 0xF0F3F8)
        
        [overallGoalView, sessionGoalView, retryGoalView].forEach {
            view.addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }

        NSLayoutConstraint.activate([
            overallGoalView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            overallGoalView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            overallGoalView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            sessionGoalView.topAnchor.constraint(equalTo: overallGoalView.bottomAnchor, constant: 24),
            sessionGoalView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            sessionGoalView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            
            retryGoalView.topAnchor.constraint(equalTo: sessionGoalView.bottomAnchor, constant: 24),
            retryGoalView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            retryGoalView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20)
        ])
    }
    
    // MARK: Actions
    
    private func fetchGoalData() {
        interactor?.loadOverallGoal(request: .init())
        interactor?.loadSessionGoal(request: .init())
    }
    
    @objc private func didTapNotification() {
        print("알림 버튼 눌림")
    }
}

extension HomeViewController: HomeDisplayLogic {
    func displayOverallGoal(viewModel: Home.LoadOverallGoal.ViewModel) {
        overallGoalView.configure(with: viewModel.displayedGoal)
    }
    
    func displaySessionGoal(viewModel: Home.LoadSessionGoal.ViewModel) {
        sessionGoalView.configure(with: viewModel.displayedSessionGoal)
    }
}

// MARK: - OverallGaol

final class OverallGoalView: UIView {
    
    // MARK: UI
    
    private let iconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.backgroundColor = .init(hex: 0xD7DBE3)
        imageView.layer.cornerRadius = 16
        imageView.clipsToBounds = true
        return imageView
    }()
    
    private let titleLabel = UILabel()
    
    private let editButton: UIButton = {
        let button = UIButton(type: .system)
        button.setAttributedTitle(.withLetterSpacing(
            text: "수정",
            font: .pretendard(size: 14, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x585D64)
        ), for: .normal)
        return button
    }()
    
    private let distanceTitleLabel: UILabel = {
        let label = UILabel()
        label.attributedText = .withLetterSpacing(
            text: "목표 거리",
            font: .pretendard(size: 12, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x82878F)
        )
        return label
    }()
    
    private let distanceValueLabel = UILabel()
    
    private let timeTitleLabel: UILabel = {
        let label = UILabel()
        label.attributedText = .withLetterSpacing(
            text: "목표 시간",
            font: .pretendard(size: 12, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x82878F)
        )
        return label
    }()
    
    private let timeValueLabel = UILabel()
    
    private let currentLabel = UILabel()
    
    private let totalLabel = UILabel()
    
    private lazy var progressStack: UIStackView = {
        let stack = UIStackView(arrangedSubviews: [currentLabel, totalLabel])
        stack.axis = .horizontal
        stack.spacing = 4
        return stack
    }()
    
    private let progressView: UIProgressView = {
        let progress = UIProgressView(progressViewStyle: .default)
        progress.trackTintColor = .init(hex: 0xD7DBE3)
        progress.progressTintColor = .init(hex: 0x3E4FFF)
        progress.layer.cornerRadius = 5
        progress.clipsToBounds = true
        return progress
    }()
    
    // MARK: Object lifecycle
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: Setup
    
    private func setupView() {
        backgroundColor = .init(hex: 0xFFFFFF)

        [iconImageView, titleLabel, editButton, distanceTitleLabel, distanceValueLabel, timeTitleLabel, timeValueLabel, progressStack, progressView].forEach {
            addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }

        NSLayoutConstraint.activate([
            iconImageView.topAnchor.constraint(equalTo: topAnchor, constant: 24),
            iconImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            iconImageView.widthAnchor.constraint(equalToConstant: 32),
            iconImageView.heightAnchor.constraint(equalToConstant: 32),

            titleLabel.centerYAnchor.constraint(equalTo: iconImageView.centerYAnchor),
            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 8),

            editButton.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            editButton.centerYAnchor.constraint(equalTo: titleLabel.centerYAnchor),

            distanceTitleLabel.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 16),
            distanceTitleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),

            distanceValueLabel.topAnchor.constraint(equalTo: distanceTitleLabel.bottomAnchor, constant: 2),
            distanceValueLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),

            timeTitleLabel.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 16),
            timeTitleLabel.leadingAnchor.constraint(equalTo: distanceValueLabel.trailingAnchor, constant: 40),

            timeValueLabel.topAnchor.constraint(equalTo: timeTitleLabel.bottomAnchor, constant: 2),
            timeValueLabel.leadingAnchor.constraint(equalTo: timeTitleLabel.leadingAnchor),

            progressStack.topAnchor.constraint(equalTo: distanceValueLabel.bottomAnchor, constant: 16),
            progressStack.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            progressStack.trailingAnchor.constraint(lessThanOrEqualTo: trailingAnchor, constant: -20),

            progressView.topAnchor.constraint(equalTo: progressStack.bottomAnchor, constant: 6),
            progressView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            progressView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            progressView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -24),
            progressView.heightAnchor.constraint(equalToConstant: 10)
        ])
    }
    
    // MARK: Configure
    
    func configure(with data: Home.LoadOverallGoal.ViewModel.DisplayedGoal) {
        // TODO: 디자인 확정 후 URL 기반 이미지로 교체 (Kingfisher 등 라이브러리 활용 예정)
        iconImageView.image = UIImage(systemName: data.iconName)
        
        titleLabel.attributedText = .withLetterSpacing(
            text: data.title,
            font: .pretendard(size: 18, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x232529)
        )
        
        distanceValueLabel.attributedText = .withLetterSpacing(
            text: data.distance,
            font: .pretendard(size: 28, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x3B3E43)
        )
        
        timeValueLabel.attributedText = .withLetterSpacing(
            text: data.time,
            font: .pretendard(size: 28, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x3B3E43)
        )
        
        currentLabel.attributedText = .withLetterSpacing(
            text: data.currentSession,
            font: .pretendard(size: 16, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x3E4FFF)
        )
        totalLabel.attributedText = .withLetterSpacing(
            text: data.totalSession,
            font: .pretendard(size: 12, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x82878F)
        )
        
        // TODO: 애니메이션 관련 디자이너와 상의 필요
        progressView.setProgress(data.progress, animated: false)
    }
}

// MARK: - SessionGoal

final class SessionGoalView: UIView {
    
    // MARK: UI
    
    private let titleLabel = UILabel()
    
    private let subtitleLabel = UILabel()
    
    private let metricView = MetricView()
    
    private let startButton: UIButton = {
        let button = UIButton(type: .system)
        button.layer.cornerRadius = 12
        button.backgroundColor = .init(hex: 0x3E4FFF)
        return button
    }()
    
    // MARK: Object lifecycle
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: Setup
    
    private func setupView() {
        backgroundColor = .init(hex: 0xFFFFFF)
        layer.cornerRadius = 20
        
        [titleLabel, subtitleLabel, metricView, startButton].forEach {
            addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }
        
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 20),
            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 2),
            subtitleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            subtitleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            
            metricView.topAnchor.constraint(equalTo: subtitleLabel.bottomAnchor, constant: 24),
            metricView.leadingAnchor.constraint(equalTo: leadingAnchor),
            metricView.trailingAnchor.constraint(equalTo: trailingAnchor),
            
            startButton.topAnchor.constraint(equalTo: metricView.bottomAnchor, constant: 24),
            startButton.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            startButton.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            startButton.heightAnchor.constraint(equalToConstant: 56),
            startButton.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -20)
        ])
    }
    
    // MARK: Configure
    
    func configure(with data: Home.LoadSessionGoal.ViewModel.DisplayedSessionGoal) {
        titleLabel.attributedText = .withLetterSpacing(
            text: data.title,
            font: .pretendard(size: 18, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x232529)
        )
        
        subtitleLabel.attributedText = .withLetterSpacing(
            text: data.subtitle,
            font: .pretendard(size: 14, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x585D64)
        )
        
        startButton.setAttributedTitle(.withLetterSpacing(
            text: "러닝하러 가기",
            font: .pretendard(size: 16, weight: .bold),
            px: -0.2,
            color: .init(hex: 0xFFFFFF)
        ), for: .normal)
        
        metricView.configure(with: data.metrics)
    }
}


final class MetricView: UIView {
    
    // MARK: UI
    
    private let metricsStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .horizontal
        stackView.alignment = .center
        stackView.spacing = 0
        stackView.distribution = .fill
        return stackView
    }()
    
    // MARK: Properties

    private var metricViews: [MetricItemView] = []

    // MARK: Object lifecycle

    override init(frame: CGRect) {
        super.init(frame: .zero)
        setupView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: Setup
    
    private func setupView() {
        addSubview(metricsStackView)
        metricsStackView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            metricsStackView.topAnchor.constraint(equalTo: topAnchor),
            metricsStackView.leadingAnchor.constraint(equalTo: leadingAnchor),
            metricsStackView.trailingAnchor.constraint(equalTo: trailingAnchor),
            metricsStackView.bottomAnchor.constraint(equalTo: bottomAnchor)
        ])
    }
    
    // MARK: Configure
    
    func configure(with metrics: [Home.LoadSessionGoal.ViewModel.DisplayedMetric]) {
        metricsStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
        metricViews.removeAll()
        
        var firstMetricView: MetricItemView?
        for (index, data) in metrics.enumerated() {
            let metricView = MetricItemView()
            metricView.configure(with: data)
            metricsStackView.addArrangedSubview(metricView)
            metricViews.append(metricView)
            
            if let first = firstMetricView {
                metricView.widthAnchor.constraint(equalTo: first.widthAnchor).isActive = true
            } else {
                firstMetricView = metricView
            }
            
            if index < metrics.count - 1 {
                let separator = makeSeparator()
                metricsStackView.addArrangedSubview(separator)
                NSLayoutConstraint.activate([
                    separator.widthAnchor.constraint(equalToConstant: 1),
                    separator.heightAnchor.constraint(equalToConstant: 40)
                ])
            }
        }
    }
    
    private func makeSeparator() -> UIView {
        let separator = UIView()
        separator.backgroundColor = .init(hex: 0xDFE4EC)
        separator.translatesAutoresizingMaskIntoConstraints = false
        return separator
    }
}


final class MetricItemView: UIView {
    
    // MARK: UI
    
    private let imageView: UIImageView = {
       let imageView = UIImageView()
        imageView.tintColor = .init(hex: 0xB5B9C0)
        return imageView
    }()
    
    private let valueLabel = UILabel()
    
    private let titleLabel = UILabel()
    
    // MARK: Object lifecycle

    override init(frame: CGRect) {
        super.init(frame: .zero)
        setupView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    // MARK: Setup

    private func setupView() {
        [imageView, valueLabel, titleLabel].forEach {
            addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }
        
        NSLayoutConstraint.activate([
            imageView.topAnchor.constraint(equalTo: topAnchor),
            imageView.centerXAnchor.constraint(equalTo: centerXAnchor),
            
            valueLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),
            valueLabel.centerXAnchor.constraint(equalTo: centerXAnchor),
            
            titleLabel.topAnchor.constraint(equalTo: valueLabel.bottomAnchor, constant: 2),
            titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),
            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)
        ])
    }
    
    // MARK: Configure
    
    func configure(with data: Home.LoadSessionGoal.ViewModel.DisplayedMetric) {
        imageView.image = UIImage(systemName: data.icon)
        
        valueLabel.attributedText = .withLetterSpacing(
            text: data.value,
            font: .pretendard(size: 20, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x232529)
        )
        
        titleLabel.attributedText = .withLetterSpacing(
            text: data.title,
            font: .pretendard(size: 14, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x585D64)
        )
    }
}

// MARK: - RetryGoal

final class RetryGoalView: UIView {
    private let subtitleLabel: UILabel = {
        let label = UILabel()
        label.attributedText = .withLetterSpacing(
            text: "한 번 더 연습이 필요하다면",
            font: .pretendard(size: 14, weight: .regular),
            px: -0.2,
            color: .init(hex: 0x585D64)
        )
        return label
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.attributedText = .withLetterSpacing(
            text: "이전 목표로 다시 달리기",
            font: .pretendard(size: 18, weight: .bold),
            px: -0.2,
            color: .init(hex: 0x232529)
        )
        return label
    }()
    
    private let playButton: UIButton = {
        let button = UIButton(type: .system)
        let image = UIImage(systemName: "play.fill")
        button.setImage(image, for: .normal)
        button.tintColor = .init(hex: 0xEDF2FF)
        button.backgroundColor = .init(hex: 0x3E4FFF)
        button.layer.cornerRadius = 16
        button.clipsToBounds = true
        return button
    }()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    private func setupView() {
        backgroundColor = .init(hex: 0xFFFFFF)
        layer.cornerRadius = 20
        
        [subtitleLabel, titleLabel, playButton].forEach {
            addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }
        
        NSLayoutConstraint.activate([
            subtitleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 20),
            subtitleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            subtitleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            
            titleLabel.topAnchor.constraint(equalTo: subtitleLabel.bottomAnchor, constant: 2),
            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -20),
            
            playButton.centerYAnchor.constraint(equalTo: centerYAnchor),
            playButton.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            playButton.widthAnchor.constraint(equalToConstant: 32),
            playButton.heightAnchor.constraint(equalToConstant: 32)
        ])
    }
}

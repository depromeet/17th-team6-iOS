//
//  HomePresenter.swift
//  DoRunDoRun
//
//  Created by Inho Choi on 9/13/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
    func presentOverallGoal(response: Home.LoadOverallGoal.Response)
    func presentSessionGoal(response: Home.LoadSessionGoal.Response)
}

final class HomePresenter {
    weak var viewController: HomeDisplayLogic?
    
    private func mapIcon(for type: String) -> String {
        switch type {
        case "MARATHON": return "flag"
        case "STAMINA": return "dumbbell"
        case "ZONE_2": return "heart"
        default: return "circle"
        }
    }

    private func formatDistance(_ meters: Int) -> String {
        let km = Double(meters) / 1000.0
        return String(format: "%.2f km", km)
    }

    private func formatDuration(_ minutes: Int) -> String {
        let hours = minutes / 60
        let mins = minutes % 60
        if hours > 0 {
            return String(format: "%02d:%02d:00", hours, mins)
        } else {
            return String(format: "00:%02d:00", mins)
        }
    }

    private func formatPace(_ secondsPerKm: Int) -> String {
        let minutes = secondsPerKm / 60
        let seconds = secondsPerKm % 60
        return "\(minutes)'\(String(format: "%02d", seconds))\""
    }

}

extension HomePresenter: HomePresentationLogic {
    func presentOverallGoal(response: Home.LoadOverallGoal.Response) {
        let goal = response.overallGoal
        
        let progress: Float = Float(goal.currentRoundCount) / Float(goal.totalRoundCount)
        
        let displayed = Home.LoadOverallGoal.ViewModel.DisplayedGoal(
            iconName: mapIcon(for: goal.type),
            title: goal.title,
            distance: formatDistance(goal.distance),
            time: formatDuration(goal.duration),
            pace: formatPace(goal.pace),
            currentSession: "\(goal.currentRoundCount)회차",
            totalSession: "/ 총 \(goal.totalRoundCount)회",
            progress: progress
        )
        
        let viewModel = Home.LoadOverallGoal.ViewModel(displayedGoal: displayed)
        
        Task { @MainActor in
            viewController?.displayOverallGoal(viewModel: viewModel)
        }
    }
    
    func presentSessionGoal(response: Home.LoadSessionGoal.Response) {
        let sessionGoal = response.sessionGoal
        
        let displayed = Home.LoadSessionGoal.ViewModel.DisplayedSessionGoal(
            title: "\(sessionGoal.roundCount)회차 목표",
            subtitle: "목표까지 얼마 남지 않았어요! 힘차게 달려봐요!",
            distance: formatDistance(sessionGoal.distance),
            time: formatDuration(sessionGoal.duration),
            pace: formatPace(sessionGoal.pace)
        )
        
        let viewModel = Home.LoadSessionGoal.ViewModel(displayedSessionGoal: displayed)
        
        Task { @MainActor in
            viewController?.displaySessionGoal(viewModel: viewModel)
        }
    }
}
